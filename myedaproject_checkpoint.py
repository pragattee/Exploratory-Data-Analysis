# -*- coding: utf-8 -*-
"""MyEDAproject-checkpoint.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18-FA2e3iHO6OkniakVl6_8AxGWflwhEC

### Sustainable Development
#### This comprehensive dataset showcasing sustainable energy indicators and other useful factors across all countries from 2000 to 2020. Dive into vital aspects such as electricity access, renewable energy, carbon emissions, energy intensity, Financial flows, and economic growth. Compare nations, track progress towards Sustainable Development Goal 7, and gain profound insights into global energy consumption patterns over time.
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import warnings
warnings.filterwarnings('ignore')

sns.set_style('darkgrid')
plt.rcParams['font.size'] = 15
#plt.rcParams['figure.figsize'] = (10,7)
plt.rcParams['figure.facecolor'] = '#FFE5B4'

"""### Loading the dataset"""

df = pd.read_csv(r'C:\Users\msi\OneDrive\Desktop\CSV\global-data-on-sustainable-energy (1).csv')

df

#prints the first five entries of the dataframe
df.head()

# prints the last five entries of the dataframe
df.tail()

#prints the number of columns in the dataset
df.columns

#prints some statistical data like percentile, mean and std of the numerical values in the dataet
df.describe()

#renaming the columns%Electricity Access
df.rename(columns = {"Access to electricity (% of population)": "%Electricity Access", "Access to clean fuels for cooking": "Clean fuel access",
                     "Renewable-electricity-generating-capacity-per-capita": "Renewable electricity(per-capita)",
                     "Financial flows to developing countries (US $)":"Financial flows (US$)", "Renewable energy share in the total final energy consumption (%)" :"Renewable energy share in the total final energy consumption (%)",
                     "Electricity from fossil fuels (TWh)": "Elect. from fossil (TWh)","Electricity from nuclear (TWh)": "Elect. from nuclear (TWh)",
                     "Electricity from renewables (TWh)": "Elect. from renewables (TWh)", "Low-carbon electricity (% electricity)": "Low-carbon electricity (% elect.)",
                     "Primary energy consumption per capita (kWh/person)":"Energy consumption(kwh/person)","Energy intensity level of primary energy (MJ/$2017 PPP GDP)":"Energy intensity (MJ/$2017 PPP GDP)",
                     "Value_co2_emissions_kt_by_country": "Value_co2_emmission_kt_bycountry","Renewables (% equivalent primary energy)":"Renewables (% equivalent primary energy)",
                     "gdp_growth":"gdp_growth","gdp_per_capita":"gdp_per_capita","Land Area(Km2)":"Land Area(Km2)",
                     "Latitude":"Latitude","Longitude":"Longitude"}, inplace = True)

df.head()

"""### Data Cleaning
1. Missing Values
2. Explore About the Numerical Variables
3. Explore About Categorical Variables
4. Finding realtionship between features
"""

#printss the information about the dataframe
df.info()

# prints the datatypes of the columns
df.dtypes

df.isnull()

df.isnull().sum()

#prints the dupliacte values
df.duplicated()

"""### Univariate Analysis:
#### univariate analysis refers to the examination and exploration of a single variable in a dataset. It involves generating summary statistics, visualizations (e.g., histograms, box plots), and understanding the distribution and characteristics of that specific variable.

#### Histogram
"""

fig, ax = plt.subplots()
sns.histplot(x='Renewable electricity(per-capita)', data=df)
print("Elect. from renewables (TWh):",df['Renewable electricity(per-capita)'].min())
print("Elect. from renewables (TWh)s:",df['Renewable electricity(per-capita)'].max())
ax.set_xlim(0, 800)
ax.set_ylim(0, 400)

plt.show()

"""#### KDE PLOT"""

sns.kdeplot(x='%Electricity Access', data=df, hue='Financial flows (US$)')
plt.show()

"""#### BOX PLOT"""

sns.boxplot(x=df['%Electricity Access'])

sns.violinplot(x=df["%Electricity Access"])

df.Year.value_counts("%Electricity Access")

df.Year.value_counts().plot.pie(autopct='%1.01f%%')

# Mean
mean_gdp_growth = df['gdp_growth'].mean()
mean_gdp_growth

# Median
mean_gdp_growth = df['gdp_growth'].median()
mean_gdp_growth

# mode
mean_gdp_growth = df['gdp_growth'].mode()
mean_gdp_growth[0]

# Range

range_gdp_growth = df['gdp_growth'].max() - df['gdp_growth'].min()
range_gdp_growth

#  Variance

variance_gdp_growth = df['gdp_growth'].var()
variance_gdp_growth

std_gdp_growth = df['gdp_growth'].std()
std_gdp_growth

"""### Bivariate Analysis

#### Strip Plot
"""

sns.stripplot(x=df["Value_co2_emmission_kt_bycountry"])

sns.violinplot(x='Year', y='Value_co2_emmission_kt_bycountry', data=df.head(10))
plt.title('Violin Plot: Entity by Value_co2_emmission_kt_bycountry')
plt.xticks(rotation=45)
plt.show()

"""### Multivariate Analysis"""

sns.scatterplot(x='Year', y='Value_co2_emmission_kt_bycountry', data=df, size = 200, color = 'MediumSeaGreen')
plt.title('Scatter Plot: Year vs Value_co2_emmission_kt_bycountry')
plt.legend(loc = "lower right", fontsize = '10')
plt.show()

sns.pairplot(data=df)

df_top50 = df.head(15)

# Create a count plot
plt.figure(figsize=(20, 10))
sns.countplot(x='gdp_growth', data=df_top50, palette='viridis')
plt.xlabel('gdp_growth')
plt.ylabel('Entity')
plt.title('Countplot of GDP Growth for Top 50 Countries')
plt.tight_layout()

# Show the plot
plt.show()

df = df.sort_values(by='gdp_growth', ascending=False)

# Take the top 15 rows
df_top15 = df.head(50)

# Create a bar plot
plt.figure(figsize=(10, 6))
plt.bar(df_top15['Entity'], df_top15['gdp_growth'], color='skyblue')
plt.xlabel('Entity')
plt.ylabel('gdp_growth')
plt.title('Top 50 Countries by GDP Growth')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.tight_layout()

# Show the plot
plt.show()

df_top50 = df.head(100)

# Create a box plot
plt.figure(figsize=(10, 6))
plt.boxplot(df_top50['gdp_growth'])
plt.xlabel('Entity')
plt.ylabel('gdp_growth')
plt.title('Boxplot of GDP Growth for Top 50 Countries')
plt.xticks([1], ['gdp_growth'])  # Set x-axis label to 'GDP Growth'
plt.tight_layout()

# Show the plot
plt.show()

df_top50 = df.head(10)

# Create a violin plot
plt.figure(figsize=(10, 6))
sns.violinplot(x='Entity', y='Value_co2_emmission_kt_bycountry', data=df_top50, palette='muted')
plt.xlabel('Entity')
plt.ylabel('Value_co2_emmission_kt_bycountry)')
plt.title('Violinplot of Value_co2_emmission_kt_bycountry by Top 10 Countries')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.tight_layout()

# Show the plot
plt.show()

"""### Questions

### Question 1. Which country has the highest aid and assistance from developed countries for clean energy projects?
"""

highest_aid_country = df.loc[df['Financial flows (US$)'].idxmax()]

# Print the information
print("Country with the Highest Aid Assistance:")
print(f"Country: {highest_aid_country['Entity']}")
print(f"Financial Flows (Aid Assistance): {highest_aid_country['Financial flows (US$)']}")

"""### Question 2. Which country has the lowest aid and assistance from developed countries for clean energy projects?"""

lowest_aid_country = df.loc[df['Financial flows (US$)'].idxmin()]

# Print the information
print("Country with the Lowest Aid Assistance:")
print(f"Country: {lowest_aid_country['Entity']}")
print(f"Financial Flows (Aid Assistance): {lowest_aid_country['Financial flows (US$)']}")

"""### Question 3. Which country has the highest gross domestic product per person or gdp_per_capita?"""

highest_gdp_country = df.loc[df['gdp_growth'].idxmax()]

# Print the information
print("Country with the Highest GDP Growth:")
print(f"Country: {highest_gdp_country['Entity']}")
print(f"GDP Growth: {highest_gdp_country['gdp_growth']}")

"""### Question 4. Which country has the lowest gross domestic product per person or gdp_per_capita?"""

lowest_gdp_country = df.loc[df['gdp_growth'].idxmin()]

# Print the information
print("Country with the lowest GDP Growth:")
print(f"Country: {highest_gdp_country['Entity']}")
print(f"GDP Growth: {highest_gdp_country['gdp_growth']}")

"""### Question 5. Which country has the highest energy consumption?"""

highest_energy_country = df.loc[df[' Energy consumption(kwh/person)'].idxmax()]

# Print the information
print("Country with the Highest Energy Consumption:")
print(f"Country: {highest_energy_country['Entity']}")
print(f"Energy Consumption: {highest_energy_country[' Energy consumption(kwh/person)']} units")

"""### Question 6. Which country has the lowest energy consumption?

"""

lowest_energy_country = df.loc[df[' Energy consumption(kwh/person)'].idxmin()]

# Print the information
print("Country with the Lowest Energy Consumption:")
print(f"Country: {lowest_energy_country['Entity']}")
print(f"Energy Consumption: {lowest_energy_country[' Energy consumption(kwh/person)']} units")

"""### Question 7. Which country has the highest value of the co2 emitted?"""

highest_co2_country = df.loc[df['Value_co2_emmission_kt_bycountry'].idxmax()]

# Print the information
print("Country with the Highest CO2 Emission:")
print(f"Country: {highest_co2_country['Entity']}")
print(f"CO2 Emission: {highest_co2_country['Value_co2_emmission_kt_bycountry']} units")

"""### Question 8. Which country has the lowest value of the co2 emitted?

"""

lowest_co2_country = df.loc[df['Value_co2_emmission_kt_bycountry'].idxmin()]

print("Country with the lowest CO2 Emission:")
print(f"Country: {lowest_co2_country['Entity']}")
print(f"CO2 Emission: {lowest_co2_country['Value_co2_emmission_kt_bycountry']} units")

"""### Question 9. Which country derives the highest primary energy that is derived from renewable sources?

"""

highest_renewable_country = df.loc[df['Renewables (% equivalent primary energy)'].idxmax()]

print("Country with the Highest Primary Energy from Renewable Sources:")
print(f"Country: {highest_renewable_country['Entity']}")
print(f"Renewable Resources: {highest_renewable_country['Renewables (% equivalent primary energy)']} units")

"""### Question 10. Which country derives the lowest primary energy that is derived from renewable sources?"""

lowest_renewable_country = df.loc[df['Renewables (% equivalent primary energy)'].idxmin()]

print("Country with the lowest Primary Energy from Renewable Sources:")
print(f"Country: {lowest_renewable_country['Entity']}")
print(f"Renewable Resources: {lowest_renewable_country['Renewables (% equivalent primary energy)']} units")

"""### Question11. Which country has the highest GDP growth?"""

highest_gdp_growth_country = df.loc[df['gdp_growth'].idxmax()]

# Print the information
print("Country with the Highest GDP Growth:")
print(f"Country: {highest_gdp_growth_country['Entity']}")
print(f"GDP Growth: {highest_gdp_growth_country['gdp_growth']}")

"""### Question12. Which country has the lowest GDP growth?"""

lowest_gdp_growth_country = df.loc[df['gdp_growth'].idxmin()]

# Print the information
print("Country with the lowest GDP Growth:")
print(f"Country: {lowest_gdp_growth_country['Entity']}")
print(f"GDP Growth: {lowest_gdp_growth_country['gdp_growth']}")

"""### Question 13. Which country has the highest population with electricity access?"""

highest_electricity_access_country = df.loc[df['%Electricity Access'].idxmax()]

# Print the information
print("Country with the Highest Population with Electricity Access:")
print(f"Country: {highest_electricity_access_country['Entity']}")
print(f"Electricity Access: {highest_electricity_access_country['%Electricity Access']}%")

"""### Question 14. Which country has the lowest people with electricity access?"""

lowest_electricity_access_country = df.loc[df['%Electricity Access'].idxmin()]

# Print the information
print("Country with the lowest Population with Electricity Access:")
print(f"Country: {lowest_electricity_access_country['Entity']}")
print(f"Electricity Access: {lowest_electricity_access_country['%Electricity Access']}%")

"""### Question 16. In which year was the highest energy consumption and which country had the highest consumption?"""

highest_energy_year = df.loc[df[' Energy consumption(kwh/person)'].idxmax()]['Year']

# Find the country with the highest energy consumption
highest_energy_country = df.loc[df[' Energy consumption(kwh/person)'].idxmax()]['Entity']

# Print the information
print("Year with the Highest Energy Consumption:")
print(f"Year: {highest_energy_year}")

print("\nCountry with the Highest Energy Consumption:")
print(f"Country: {highest_energy_country}")

"""### Question 17. In which year was the lowest energy consumption and which country had the lowest consumption?

"""

lowest_energy_country = df.loc[df[' Energy consumption(kwh/person)'].idxmin()]['Entity']

# Print the information
print("Year with the Lowest Energy Consumption:")
print(f"Year: {lowest_energy_year}")

print("\nCountry with the Lowest Energy Consumption:")
print(f"Country: {lowest_energy_country}")

"""### Question 18. Which country has the highest land area?"""

highest_land_area_country = df.loc[df['Land Area(Km2)'].idxmax()]

# Print the information
print("Country with the Highest Land Area:")
print(f"Country: {highest_land_area_country['Entity']}")
print(f"Land Area: {highest_land_area_country['Land Area(Km2)']} square kilometers")

"""### Question 19. Which country has the lowest land area?"""

lowest_land_area_country = df.loc[df['Land Area(Km2)'].idxmin()]

# Print the information
print("Country with the lowest Land Area:")
print(f"Country: {lowest_land_area_country['Entity']}")
print(f"Land Area: {lowest_land_area_country['Land Area(Km2)']} square kilometers")

